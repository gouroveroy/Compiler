Line# 1: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 1: Token <ID> Lexeme f found
Line# 1: Token <LPAREN> Lexeme ( found
Line# 1: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 1: Token <ID> Lexeme a found
parameter_list  : type_specifier ID
Line# 1: Token <RPAREN> Lexeme ) found
Line# 2: Token <LCURL> Lexeme { found
Line# 3: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 3: Token <ID> Lexeme k found
Line# 3: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON  
statement : var_declaration 
statements : statement  
Line# 4: Token <ID> Lexeme k found
Line# 4: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 4: Token <CONST_INT> Lexeme 5 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 4: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 5: Token <WHILE> Lexeme while found
Line# 5: Token <LPAREN> Lexeme ( found
Line# 5: Token <ID> Lexeme k found
Line# 5: Token <RELOP> Lexeme > found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 5: Token <CONST_INT> Lexeme 0 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 5: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression RELOP simple_expression	  
logic_expression : rel_expression 	 
expression 	: logic_expression	 
Line# 6: Token <LCURL> Lexeme { found
Line# 7: Token <ID> Lexeme a found
Line# 7: Token <INCOP> Lexeme ++ found
variable : ID 	 
factor	: variable INCOP   
unary_expression : factor 
term :	unary_expression 
Line# 7: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statement  
Line# 8: Token <ID> Lexeme k found
Line# 8: Token <DECOP> Lexeme -- found
variable : ID 	 
factor	: variable DECOP  
unary_expression : factor 
term :	unary_expression 
Line# 8: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 9: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 3











	ScopeTable# 2








	9 --> <k, INT, Width: 2, Offset: 2, IsParam: 0, Scope: 2>
	10 --> <a, INT, Width: 2, Offset: 4, IsParam: 1, Scope: 2>

	ScopeTable# 1



	4 --> <f, FUNCTION, Width: 2, Offset: -1, IsParam: 0, Scope: 1, RetType: INT>







statement : compound_statement 
statement : WHILE LPAREN expression RPAREN statement
statements : statements statement  
Line# 10: Token <RETURN> Lexeme return found
Line# 10: Token <CONST_INT> Lexeme 3 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 10: Token <MULOP> Lexeme * found
Line# 10: Token <ID> Lexeme a found
Line# 10: Token <ADDOP> Lexeme - found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	term MULOP unary_expression 
simple_expression : term 
Line# 10: Token <CONST_INT> Lexeme 7 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 10: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term  
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
statement : RETURN expression SEMICOLON
statements : statements statement  
Line# 11: Token <ID> Lexeme a found
Line# 11: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 11: Token <CONST_INT> Lexeme 9 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 11: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 12: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 2








	9 --> <k, INT, Width: 2, Offset: 2, IsParam: 0, Scope: 2>
	10 --> <a, INT, Width: 2, Offset: 4, IsParam: 1, Scope: 2>

	ScopeTable# 1



	4 --> <f, FUNCTION, Width: 2, Offset: -1, IsParam: 0, Scope: 1, RetType: INT>







func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 
unit : func_definition  
program : unit 
Line# 14: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 14: Token <ID> Lexeme g found
Line# 14: Token <LPAREN> Lexeme ( found
Line# 14: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 14: Token <ID> Lexeme a found
parameter_list  : type_specifier ID
Line# 14: Token <COMMA> Lexeme , found
Line# 14: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 14: Token <ID> Lexeme b found
parameter_list  : parameter_list COMMA type_specifier ID
Line# 14: Token <RPAREN> Lexeme ) found
Line# 15: Token <LCURL> Lexeme { found
Line# 17: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 17: Token <ID> Lexeme x found
Line# 17: Token <COMMA> Lexeme , found
declaration_list : ID 
Line# 17: Token <ID> Lexeme i found
Line# 17: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID  
var_declaration : type_specifier declaration_list SEMICOLON  
statement : var_declaration 
statements : statement  
Line# 18: Token <ID> Lexeme x found
Line# 18: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 18: Token <ID> Lexeme f found
Line# 18: Token <LPAREN> Lexeme ( found
Line# 18: Token <ID> Lexeme a found
Line# 18: Token <RPAREN> Lexeme ) found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
arguments : logic_expression
argument_list : arguments  
factor	: ID LPAREN argument_list RPAREN  
unary_expression : factor 
term :	unary_expression 
Line# 18: Token <ADDOP> Lexeme + found
simple_expression : term 
Line# 18: Token <ID> Lexeme a found
Line# 18: Token <ADDOP> Lexeme + found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : simple_expression ADDOP term  
Line# 18: Token <ID> Lexeme b found
Line# 18: Token <SEMICOLON> Lexeme ; found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : simple_expression ADDOP term  
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 20: Token <FOR> Lexeme for found
Line# 20: Token <LPAREN> Lexeme ( found
Line# 20: Token <ID> Lexeme i found
Line# 20: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 20: Token <CONST_INT> Lexeme 0 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 20: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
Line# 20: Token <ID> Lexeme i found
Line# 20: Token <RELOP> Lexeme < found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 20: Token <CONST_INT> Lexeme 7 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 20: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression RELOP simple_expression	  
logic_expression : rel_expression 	 
expression 	: logic_expression	 
expression_statement : expression SEMICOLON 		 
Line# 20: Token <ID> Lexeme i found
Line# 20: Token <INCOP> Lexeme ++ found
variable : ID 	 
factor	: variable INCOP   
unary_expression : factor 
term :	unary_expression 
Line# 20: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
Line# 21: Token <LCURL> Lexeme { found
Line# 22: Token <IF> Lexeme if found
Line# 22: Token <LPAREN> Lexeme ( found
Line# 22: Token <ID> Lexeme i found
Line# 22: Token <MULOP> Lexeme % found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
Line# 22: Token <CONST_INT> Lexeme 3 found
factor	: CONST_INT   
unary_expression : factor 
term :	term MULOP unary_expression 
Line# 22: Token <RELOP> Lexeme == found
simple_expression : term 
Line# 22: Token <CONST_INT> Lexeme 0 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 22: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression RELOP simple_expression	  
logic_expression : rel_expression 	 
expression 	: logic_expression	 
Line# 23: Token <LCURL> Lexeme { found
Line# 24: Token <ID> Lexeme x found
Line# 24: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 24: Token <ID> Lexeme x found
Line# 24: Token <ADDOP> Lexeme + found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 24: Token <CONST_INT> Lexeme 5 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 24: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term  
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statement  
Line# 25: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 6











	ScopeTable# 5











	ScopeTable# 4






	7 --> <i, INT, Width: 2, Offset: 4, IsParam: 0, Scope: 4>


	10 --> <a, INT, Width: 2, Offset: 6, IsParam: 1, Scope: 4>
	11 --> <b, INT, Width: 2, Offset: 4, IsParam: 1, Scope: 4> --> <x, INT, Width: 2, Offset: 2, IsParam: 0, Scope: 4>
	ScopeTable# 1



	4 --> <f, FUNCTION, Width: 2, Offset: -1, IsParam: 0, Scope: 1, RetType: INT>
	5 --> <g, FUNCTION, Width: 4, Offset: -1, IsParam: 0, Scope: 1, RetType: INT>






statement : compound_statement 
Line# 26: Token <ELSE> Lexeme else found
Line# 27: Token <LCURL> Lexeme { found
Line# 28: Token <ID> Lexeme x found
Line# 28: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 28: Token <ID> Lexeme x found
Line# 28: Token <ADDOP> Lexeme - found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 28: Token <CONST_INT> Lexeme 1 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 28: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term  
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statement  
Line# 29: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 7











	ScopeTable# 5











	ScopeTable# 4






	7 --> <i, INT, Width: 2, Offset: 4, IsParam: 0, Scope: 4>


	10 --> <a, INT, Width: 2, Offset: 6, IsParam: 1, Scope: 4>
	11 --> <b, INT, Width: 2, Offset: 4, IsParam: 1, Scope: 4> --> <x, INT, Width: 2, Offset: 2, IsParam: 0, Scope: 4>
	ScopeTable# 1



	4 --> <f, FUNCTION, Width: 2, Offset: -1, IsParam: 0, Scope: 1, RetType: INT>
	5 --> <g, FUNCTION, Width: 4, Offset: -1, IsParam: 0, Scope: 1, RetType: INT>






statement : compound_statement 
statement : IF LPAREN expression RPAREN statement ELSE statement 
statements : statement  
Line# 30: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 5











	ScopeTable# 4






	7 --> <i, INT, Width: 2, Offset: 4, IsParam: 0, Scope: 4>


	10 --> <a, INT, Width: 2, Offset: 6, IsParam: 1, Scope: 4>
	11 --> <b, INT, Width: 2, Offset: 4, IsParam: 1, Scope: 4> --> <x, INT, Width: 2, Offset: 2, IsParam: 0, Scope: 4>
	ScopeTable# 1



	4 --> <f, FUNCTION, Width: 2, Offset: -1, IsParam: 0, Scope: 1, RetType: INT>
	5 --> <g, FUNCTION, Width: 4, Offset: -1, IsParam: 0, Scope: 1, RetType: INT>






statement : compound_statement 
statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement
statements : statements statement  
Line# 32: Token <RETURN> Lexeme return found
Line# 32: Token <ID> Lexeme x found
Line# 32: Token <SEMICOLON> Lexeme ; found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
statement : RETURN expression SEMICOLON
statements : statements statement  
Line# 33: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 4






	7 --> <i, INT, Width: 2, Offset: 4, IsParam: 0, Scope: 4>


	10 --> <a, INT, Width: 2, Offset: 6, IsParam: 1, Scope: 4>
	11 --> <b, INT, Width: 2, Offset: 4, IsParam: 1, Scope: 4> --> <x, INT, Width: 2, Offset: 2, IsParam: 0, Scope: 4>
	ScopeTable# 1



	4 --> <f, FUNCTION, Width: 2, Offset: -1, IsParam: 0, Scope: 1, RetType: INT>
	5 --> <g, FUNCTION, Width: 4, Offset: -1, IsParam: 0, Scope: 1, RetType: INT>






func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 
unit : func_definition  
program : program unit 
Line# 35: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 35: Token <ID> Lexeme main found
Line# 35: Token <LPAREN> Lexeme ( found
Line# 35: Token <RPAREN> Lexeme ) found
Line# 36: Token <LCURL> Lexeme { found
Line# 37: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 37: Token <ID> Lexeme a found
Line# 37: Token <COMMA> Lexeme , found
declaration_list : ID 
Line# 37: Token <ID> Lexeme b found
Line# 37: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID  
Line# 37: Token <ID> Lexeme i found
Line# 37: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID  
var_declaration : type_specifier declaration_list SEMICOLON  
statement : var_declaration 
statements : statement  
Line# 38: Token <ID> Lexeme a found
Line# 38: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 38: Token <CONST_INT> Lexeme 1 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 38: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 39: Token <ID> Lexeme b found
Line# 39: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 39: Token <CONST_INT> Lexeme 2 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 39: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 40: Token <ID> Lexeme a found
Line# 40: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 40: Token <ID> Lexeme g found
Line# 40: Token <LPAREN> Lexeme ( found
Line# 40: Token <ID> Lexeme a found
Line# 40: Token <COMMA> Lexeme , found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
arguments : logic_expression
Line# 40: Token <ID> Lexeme b found
Line# 40: Token <RPAREN> Lexeme ) found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
arguments : arguments COMMA logic_expression 
argument_list : arguments  
factor	: ID LPAREN argument_list RPAREN  
unary_expression : factor 
term :	unary_expression 
Line# 40: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 41: Token <PRINTLN> Lexeme println found
Line# 41: Token <LPAREN> Lexeme ( found
Line# 41: Token <ID> Lexeme a found
Line# 41: Token <RPAREN> Lexeme ) found
Line# 41: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement  
Line# 42: Token <FOR> Lexeme for found
Line# 42: Token <LPAREN> Lexeme ( found
Line# 42: Token <ID> Lexeme i found
Line# 42: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 42: Token <CONST_INT> Lexeme 0 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 42: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
Line# 42: Token <ID> Lexeme i found
Line# 42: Token <RELOP> Lexeme < found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 42: Token <CONST_INT> Lexeme 4 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 42: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression RELOP simple_expression	  
logic_expression : rel_expression 	 
expression 	: logic_expression	 
expression_statement : expression SEMICOLON 		 
Line# 42: Token <ID> Lexeme i found
Line# 42: Token <INCOP> Lexeme ++ found
variable : ID 	 
factor	: variable INCOP   
unary_expression : factor 
term :	unary_expression 
Line# 42: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
Line# 43: Token <LCURL> Lexeme { found
Line# 44: Token <ID> Lexeme a found
Line# 44: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 44: Token <CONST_INT> Lexeme 3 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 44: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statement  
Line# 45: Token <WHILE> Lexeme while found
Line# 45: Token <LPAREN> Lexeme ( found
Line# 45: Token <ID> Lexeme a found
Line# 45: Token <RELOP> Lexeme > found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 45: Token <CONST_INT> Lexeme 0 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 45: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression RELOP simple_expression	  
logic_expression : rel_expression 	 
expression 	: logic_expression	 
Line# 46: Token <LCURL> Lexeme { found
Line# 47: Token <ID> Lexeme b found
Line# 47: Token <INCOP> Lexeme ++ found
variable : ID 	 
factor	: variable INCOP   
unary_expression : factor 
term :	unary_expression 
Line# 47: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statement  
Line# 48: Token <ID> Lexeme a found
Line# 48: Token <DECOP> Lexeme -- found
variable : ID 	 
factor	: variable DECOP  
unary_expression : factor 
term :	unary_expression 
Line# 48: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 49: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 10











	ScopeTable# 9











	ScopeTable# 8






	7 --> <i, INT, Width: 2, Offset: 6, IsParam: 0, Scope: 8>


	10 --> <a, INT, Width: 2, Offset: 2, IsParam: 0, Scope: 8>
	11 --> <b, INT, Width: 2, Offset: 4, IsParam: 0, Scope: 8>
	ScopeTable# 1

	2 --> <main, FUNCTION, Width: 0, Offset: -1, IsParam: 0, Scope: 1, RetType: INT>

	4 --> <f, FUNCTION, Width: 2, Offset: -1, IsParam: 0, Scope: 1, RetType: INT>
	5 --> <g, FUNCTION, Width: 4, Offset: -1, IsParam: 0, Scope: 1, RetType: INT>






statement : compound_statement 
statement : WHILE LPAREN expression RPAREN statement
statements : statements statement  
Line# 50: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 9











	ScopeTable# 8






	7 --> <i, INT, Width: 2, Offset: 6, IsParam: 0, Scope: 8>


	10 --> <a, INT, Width: 2, Offset: 2, IsParam: 0, Scope: 8>
	11 --> <b, INT, Width: 2, Offset: 4, IsParam: 0, Scope: 8>
	ScopeTable# 1

	2 --> <main, FUNCTION, Width: 0, Offset: -1, IsParam: 0, Scope: 1, RetType: INT>

	4 --> <f, FUNCTION, Width: 2, Offset: -1, IsParam: 0, Scope: 1, RetType: INT>
	5 --> <g, FUNCTION, Width: 4, Offset: -1, IsParam: 0, Scope: 1, RetType: INT>






statement : compound_statement 
statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement
statements : statements statement  
Line# 51: Token <PRINTLN> Lexeme println found
Line# 51: Token <LPAREN> Lexeme ( found
Line# 51: Token <ID> Lexeme a found
Line# 51: Token <RPAREN> Lexeme ) found
Line# 51: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement  
Line# 52: Token <PRINTLN> Lexeme println found
Line# 52: Token <LPAREN> Lexeme ( found
Line# 52: Token <ID> Lexeme b found
Line# 52: Token <RPAREN> Lexeme ) found
Line# 52: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement  
Line# 53: Token <PRINTLN> Lexeme println found
Line# 53: Token <LPAREN> Lexeme ( found
Line# 53: Token <ID> Lexeme i found
Line# 53: Token <RPAREN> Lexeme ) found
Line# 53: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement  
Line# 54: Token <RETURN> Lexeme return found
Line# 54: Token <CONST_INT> Lexeme 0 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 54: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
statement : RETURN expression SEMICOLON
statements : statements statement  
Line# 55: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 8






	7 --> <i, INT, Width: 2, Offset: 6, IsParam: 0, Scope: 8>


	10 --> <a, INT, Width: 2, Offset: 2, IsParam: 0, Scope: 8>
	11 --> <b, INT, Width: 2, Offset: 4, IsParam: 0, Scope: 8>
	ScopeTable# 1

	2 --> <main, FUNCTION, Width: 0, Offset: -1, IsParam: 0, Scope: 1, RetType: INT>

	4 --> <f, FUNCTION, Width: 2, Offset: -1, IsParam: 0, Scope: 1, RetType: INT>
	5 --> <g, FUNCTION, Width: 4, Offset: -1, IsParam: 0, Scope: 1, RetType: INT>






func_definition : type_specifier ID LPAREN RPAREN compound_statement
unit : func_definition  
program : program unit 
start : program 

Total Lines: 56

Total Errors: 0
